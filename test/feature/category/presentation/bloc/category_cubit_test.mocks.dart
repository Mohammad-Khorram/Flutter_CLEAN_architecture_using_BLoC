// Mocks generated by Mockito 5.4.2 from annotations
// in store/test/feature/category/presentation/bloc/category_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:store/config/boiler/entity_boiler.dart' as _i7;
import 'package:store/config/boiler/network_boiler.dart' as _i6;
import 'package:store/config/boiler/repository_boiler.dart' as _i2;
import 'package:store/feature/category/domain/usecase/category_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryRepository_0 extends _i1.SmartFake
    implements _i2.CategoryRepository {
  _FakeCategoryRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryUseCase extends _i1.Mock implements _i4.CategoryUseCase {
  MockCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get categoryRepository => (super.noSuchMethod(
        Invocation.getter(#categoryRepository),
        returnValue: _FakeCategoryRepository_0(
          this,
          Invocation.getter(#categoryRepository),
        ),
      ) as _i2.CategoryRepository);
  @override
  set categoryRepository(_i2.CategoryRepository? _categoryRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #categoryRepository,
          _categoryRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i6.NetworkException, _i7.CategoryResponseEntity>>
      getCategory() => (super.noSuchMethod(
            Invocation.method(
              #getCategory,
              [],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i6.NetworkException,
                        _i7.CategoryResponseEntity>>.value(
                _FakeEither_1<_i6.NetworkException, _i7.CategoryResponseEntity>(
              this,
              Invocation.method(
                #getCategory,
                [],
              ),
            )),
          ) as _i5.Future<
              _i3.Either<_i6.NetworkException, _i7.CategoryResponseEntity>>);
}
